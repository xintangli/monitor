package controllers

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"github.com/xintangli/monitor/service"
	"fmt"
	"encoding/json"
	"strconv"
	"github.com/xintangli/monitor/models"
)

type MonitorDataController struct {

}

var MonitorDataCtr = &MonitorDataController{

}

func (h *MonitorDataController) QueryPage(c *gin.Context)  {
	c.Request.ParseForm()
	offset, _ := strconv.Atoi(c.Param("offset"))
	limit, _ := strconv.Atoi(c.Param("limit"))
	fmt.Println(offset,limit)
	svc := &service.MonitorDataService{}
	data := &models.MonitorData{}
	dataList, total, err := svc.Page(offset, limit, data)
	if err != nil {
		fmt.Println("query hostPage error :", err)
		c.JSON(http.StatusOK, gin.H{"code": "1099", "msg": "query data error"})
		return
	}
	jsByte, err := json.Marshal(dataList)
	c.JSON(http.StatusOK, gin.H{"code": http.StatusOK, "data": string(jsByte), "total": total})
}

func (h *MonitorDataController) Put(c *gin.Context)  {
	var monitorData models.MonitorData
	if c.Bind(&monitorData) == nil {
		fmt.Println(monitorData)
		svc := &service.MonitorDataService{}
		err := svc.Put(monitorData)
		if err != nil {
			fmt.Println(err)
			c.JSON(http.StatusOK, gin.H{"code": "1099", "msg": "put data error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"code": "0000", "msg": "success"})
	}
}

func (h *MonitorDataController) Msg(c *gin.Context)  {
	msg := c.Request.FormValue("msg")
	if msg == "" {
		c.JSON(http.StatusOK, gin.H{"code": "1099", "msg": "msg is null"})
		return
	}
	var monitorData models.MonitorData
	monitorData = models.MonitorData{
		HostsId : "1",
		Data : msg,
	}
	svc := &service.MonitorDataService{}
	err := svc.Put(monitorData)
	if err != nil {
		fmt.Println(err)
		c.JSON(http.StatusOK, gin.H{"code": "1099", "msg": "put data error"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"code": "0000", "msg": "success"})
}

func (h *MonitorDataController) GetNewest(c *gin.Context)  {
	svc := &service.MonitorDataService{}
	data, err := svc.GetNewestData()
	if err != nil {
		fmt.Println(err)
		c.JSON(http.StatusOK, gin.H{"code": "1099", "msg": "GetNewest data error"})
		return
	}
	jsByte, err := json.Marshal(data)
	c.JSON(http.StatusOK, gin.H{"code": "0000", "msg": "success","data": string(jsByte)})
}


